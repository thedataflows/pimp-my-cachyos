# // █▀ █▀█ █░█ █▀█ █▀▀ █▀▀
# // ▄█ █▄█ █▄█ █▀▄ █▄▄ ██▄

$SCREEN_SHADER_COMPILED=$XDG_CONFIG_HOME/hypr/shaders/.compiled.cache.glsl

# hyprlang noerror true
# source = $XDG_STATE_HOME/hyde/hyprgui.conf # GUI specific config. Used  to not break the low level configs. this will be available downstream
source = $XDG_CONFIG_HOME/hypr/themes/colors.conf # Hyde wallbash colors

# Source groupbar in here
group:groupbar {
    enabled = true
    gradients = 1
    render_titles = 1
    font_weight_inactive = normal
    font_weight_active = semibold
    col.active = rgba($wallbash_pry3ee)
    col.inactive = rgba($wallbash_pry1ee)
    col.locked_active = rgba($wallbash_pry2ee)
    col.locked_inactive = rgba($wallbash_pry4ee)
    text_color = rgba($wallbash_txt3ee)
    text_color_inactive = rgba($wallbash_txt1ee)    
}

source = $XDG_CONFIG_HOME/hypr/themes/theme.conf # theme specific settings
source = $XDG_CONFIG_HOME/hypr/themes/wallbash.conf # Theme specific settings after Sanitize and handle fallbacks
source = $XDG_CONFIG_HOME/hypr/nvidia.conf # Nvidia specific settings
source = $XDG_CONFIG_HOME/hypr/animations.conf # source animations variables
source = $XDG_CONFIG_HOME/hypr/shaders.conf # source shader variables
source = $XDG_CONFIG_HOME/hypr/hyde.conf # Fallback if they still use hyde.conf
source = $XDG_STATE_HOME/hyde/hyprland.conf # translated from config.toml // should override everything!


# hyprlang noerror false
#! Below this is an immutable part of the configuration file, and should not be modified by the user.

#? By Hyprland convention env and startup files are sourced at the end of the main configuration file
#? To ensure that the user's settings are not overridden by the default settings
#? This will let us launch after all envs and variables are set.



# LEGACY
$quickapps = $QUICKAPPS
$term = $TERMINAL
$editor = $EDITOR
$file = $EXPLORER
$browser = $BROWSER

# Group Bar
group:groupbar{
    font_size = $FONT_SIZE
    font_family = $GROUPBAR_FONT
}

# Misc 

misc {
    font_family = $FONT
}

# HyDE Preparation
$exec.mkdir = mkdir -p $XDG_RUNTIME_DIR/hyde $XDG_CACHE_HOME/hyde/wallbash $XDG_CONFIG_HOME/hyde $XDG_DATA_HOME/hyde $(dirname $XDG_DATA_HOME)/state/hyde # Create HyDE directories
# $set.env = printf "\n_SHELL='$SHELL'\n_GDK_BACKEND='$GDK_BACKEND'\n_QT_QPA_PLATFORM='$QT_QPA_PLATFORM'\n_SDL_VIDEODRIVER='$SDL_VIDEODRIVER'\n_CLUTTER_BACKEND='$CLUTTER_BACKEND'\n_XDG_CURRENT_DESKTOP='$XDG_CURRENT_DESKTOP'\n_XDG_SESSION_TYPE='$XDG_SESSION_TYPE'\n_XDG_SESSION_DESKTOP='$XDG_SESSION_DESKTOP'\n_QT_AUTO_SCREEN_SCALE_FACTOR='$QT_AUTO_SCREEN_SCALE_FACTOR'\n_QT_WAYLAND_DISABLE_WINDOWDECORATION='$QT_WAYLAND_DISABLE_WINDOWDECORATION'\n_QT_QPA_PLATFORMTHEME='$QT_QPA_PLATFORMTHEME'\n_HYDE_PATH='$hyde.PATH'\n_MOZ_ENABLE_WAYLAND='$MOZ_ENABLE_WAYLAND'\n_GDK_SCALE='$GDK_SCALE'\n_ELECTRON_OZONE_PLATFORM_HINT='$ELECTRON_OZONE_PLATFORM_HINT'\n_XDG_RUNTIME_DIR='$XDG_RUNTIME_DIR'\n_XDG_CONFIG_HOME='$XDG_CONFIG_HOME'\n_XDG_CACHE_HOME='$XDG_CACHE_HOME'\n_XDG_DATA_HOME='$XDG_DATA_HOME'\n_GTK_THEME='$GTK_THEME'\n_ICON_THEME='$ICON_THEME'\n_COLOR_SCHEME='$COLOR_SCHEME'\n_CURSOR_SIZE='$CURSOR_SIZE'\n_CURSOR_THEME='$CURSOR_THEME'\n_FONT='$FONT'\n_FONT_SIZE='$FONT_SIZE'\n_DOCUMENT_FONT='$DOCUMENT_FONT'\n_DOCUMENT_FONT_SIZE='$DOCUMENT_FONT_SIZE'\n_MONOSPACE_FONT='$MONOSPACE_FONT'\n_MONOSPACE_FONT_SIZE='$MONOSPACE_FONT_SIZE'\n_FONT_ANTIALIASING='$FONT_ANTIALIASING'\n_FONT_HINTING='$FONT_HINTING'\n_HYDE_RUNTIME_DIR='$XDG_RUNTIME_DIR/hyde'\n_HYDE_CONFIG_HOME='$XDG_CONFIG_HOME/hyde'\n_HYDE_CACHE_HOME='$XDG_CACHE_HOME/hyde'\n_HYDE_DATA_HOME='$XDG_DATA_HOME/hyde'\n_HYDE_STATE_HOME='$(dirname $XDG_DATA_HOME)/state/hyde'\nexport _TERMINAL='$(which $TERMINAL)'\nexport _LOCKSCREEN='$LOCKSCREEN'" > "$XDG_RUNTIME_DIR/hyde/environment"

$exec.keybinds_hint = hyde-shell keybinds.hint.py --format rofi > $XDG_RUNTIME_DIR/hyde/keybinds_hint.rofi

# Execute on reload
exec = $exec.mkdir & $exec.keybinds_hint 
