# // █▀▀ █▄░█ █░█
# // ██▄ █░▀█ ▀▄▀

# See https://wiki.hyprland.org/Configuring/Environment-variables/

# Toolkit Backend Variables - https://wiki.hyprland.org/Configuring/Environment-variables/#toolkit-backend-variables
# $env.GDK_BACKEND = wayland,x11,* # GTK: Use wayland if available. If not: try x11, then any other GDK backend.
# $env.QT_QPA_PLATFORM = wayland;xcb # Qt: Use wayland if available, fall back to x11 if not.
# $env.SDL_VIDEODRIVER = wayland # Run SDL2 applications on Wayland. Remove or set to x11 if games that provide older versions of SDL cause compatibility issues
# $env.CLUTTER_BACKEND = wayland # Clutter package already has wayland enabled, this variable will force Clutter applications to try and use the Wayland backend

# XDG Specifications - https://wiki.hyprland.org/Configuring/Environment-variables/#xdg-specifications
# $env.XDG_CURRENT_DESKTOP = Hyprland
# $env.XDG_SESSION_TYPE = wayland
# $env.XDG_SESSION_DESKTOP = Hyprland

# Qt Variables  - https://wiki.hyprland.org/Configuring/Environment-variables/#qt-variables

$env.QT_AUTO_SCREEN_SCALE_FACTOR = 1 # (From the Qt documentation) enables automatic scaling, based on the monitor’s pixel density
$env.QT_QPA_PLATFORM = wayland;xcb  # Tell Qt applications to use the Wayland backend, and fall back to x11 if Wayland is unavailable

$env.QT_WAYLAND_DISABLE_WINDOWDECORATION = 1 # Disables window decorations on Qt applications
$env.QT_QPA_PLATFORMTHEME = qt6ct            # Tells Qt based applications to pick your theme from qt5ct, use with Kvantum.

# HyDE Environment Variables -

$env.PATH =
$env.MOZ_ENABLE_WAYLAND=1              # Enable Wayland for Firefox
$env.GDK_SCALE=1                       # Set GDK scale to 1 // For Xwayland on HiDPI
$env.ELECTRON_OZONE_PLATFORM_HINT=auto # Set Electron Ozone Platform Hint to auto // For Electron apps on Wayland

#  XDG-DIRS
# $XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/$(id -u)}
# $XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
# >> $env.XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
# $XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}

$env.XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR
$env.XDG_CONFIG_HOME=$HOME/.config
$env.XDG_CACHE_HOME=$HOME/.cache
$env.XDG_DATA_HOME=$HOME/.local/share
$env.XDG_STATE_HOME=$HOME/.local/state

# // █▀▀ █▄░█ █░█
# // ██▄ █░▀█ ▀▄▀

# XDG Spec // Should be fine if we have it here.

# hyprlang if !XDG_CURRENT_DESKTOP
env = XDG_CURRENT_DESKTOP,Hyprland
# hyprlang endif

# hyprlang if !XDG_SESSION_TYPE
env = XDG_SESSION_TYPE,wayland
# hyprlang endif

# hyprlang if !XDG_SESSION_DESKTOP
env = XDG_SESSION_DESKTOP,Hyprland
# hyprlang endif

# # See https://wiki.hyprland.org/Configuring/Environment-variables/
#! Remove for now
# env = GDK_BACKEND,$env.GDK_BACKEND
# env = SDL_VIDEODRIVER,$env.SDL_VIDEODRIVER
# env = CLUTTER_BACKEND,$env.CLUTTER_BACKEND

# Qt Variables

# hyprlang if !QT_AUTO_SCREEN_SCALE_FACTOR
env = QT_AUTO_SCREEN_SCALE_FACTOR,1
# hyprlang endif

# hyprlang if !QT_QPA_PLATFORM
env = QT_QPA_PLATFORM,wayland;xcb
# hyprlang endif

# hyprlang if !QT_WAYLAND_DISABLE_WINDOWDECORATION
env = QT_WAYLAND_DISABLE_WINDOWDECORATION,1
# hyprlang endif

# hyprlang if !QT_QPA_PLATFORMTHEME
env = QT_QPA_PLATFORMTHEME,qt6ct
# hyprlang endif

# Wayland-ENV

# hyprlang if !MOZ_ENABLE_WAYLAND
env = MOZ_ENABLE_WAYLAND,1
# hyprlang endif

# hyprlang if !GDK_SCALE
env = GDK_SCALE,1
# hyprlang endif

# hyprlang if !ELECTRON_OZONE_PLATFORM_HINT
env = ELECTRON_OZONE_PLATFORM_HINT,auto
# hyprlang endif

# ! these kind of stuff should not be here, for dynamic theming
# # hyprlang if !HYPRCURSOR_THEME
# env = HYPRCURSOR_THEME,$CURSOR_THEME
# # hyprlang endif

# # hyprlang if !HYPRCURSOR_SIZE
# env = HYPRCURSOR_SIZE,$CURSOR_SIZE
# # hyprlang endif

# HyDE Variables
$hyde.PATH=$HOME/.local/bin:$scrPath:$env.PATH:$PATH
env = PATH,$hyde.PATH

# XDG-ENV

# hyprlang if !XDG_CONFIG_HOME
env = XDG_CONFIG_HOME,$HOME/.config
# hyprlang endif

# hyprlang if !XDG_CACHE_HOME
env = XDG_CACHE_HOME,$HOME/.cache
# hyprlang endif

# hyprlang if !XDG_DATA_HOME
env = XDG_DATA_HOME,$HOME/.local/share
# hyprlang endif

# hyprlang if !XDG_STATE_HOME
env = XDG_STATE_HOME,$HOME/.local/state
# hyprlang endif
