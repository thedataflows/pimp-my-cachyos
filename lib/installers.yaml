## https://taskfile.dev/usage/
version: 3

# silent: true

set:
  - nounset
  - errexit
  - pipefail

vars:
  PARU: paru -S --noconfirm --needed
  PARU_REMOVE: paru -R --noconfirm --nosave --cascade
  CP: cp --update=none --verbose --recursive --no-dereference
  LINE:
    sh: bash -c "printf '%*s' $(tput cols) '' | tr ' ' '-'"

tasks:
  iamnotroot:
    desc: Check if the user is not root
    cmds:
      - |
        if [[ $EUID -eq 0 ]] then
          echo "This must run as a regular user!" 1>&2
          exit 1
        fi

  latest_github_release:
    internal: true
    vars:
      LATEST:
        sh: curl --silent --location "https://api.github.com/repos/{{.REPO}}/releases/latest" | jq -r .tag_name
    cmds:
      - |
        [[ "{{.LATEST}}" == "{{.VERSION}}" || "{{.LATEST}}" == "v{{.VERSION}}" ]] || echo "[WARN] {{.REPO}} has a newer release: {{.LATEST}}"

  initool:
    vars: &vars
      NAME: initool
      REPO: dbohdan/{{.NAME}}
      VERSION: 0.18.0
      URL_TPL: https://github.com/{{.REPO}}/releases/download/v{{.VERSION}}/{{.NAME}}-v{{.VERSION}}-fc0c3b1-{{OS}}-x86_64.zip
      DEST_DIR: /usr/local/bin
    desc: Install {{.REPO}} {{.VERSION}}
    # deps:
    #   - vars: *vars
    #     task: latest_github_release
    interactive: true
    cmds:
      - |
        [[ $({{.NAME}} version) != '{{.VERSION}}' ]] || exit 0
        echo "Installing {{.REPO}} {{.VERSION}}"
        [[ -d "{{.DEST_DIR}}" ]] || \
          sudo mkdir -p {{.DEST_DIR}}
        DOWNLOADED=/tmp/{{.NAME}}.zip
        curl -sL "{{.URL_TPL}}" > "$DOWNLOADED"
        sudo unzip -o "$DOWNLOADED" -d "{{.DEST_DIR}}"
        sudo chmod +x "{{.DEST_DIR}}/{{.NAME}}"
        rm -f "$DOWNLOADED"

  iniget:
    desc: Get INI values from a file
    deps:
      - task: initool
    vars:
      SUDO: '{{default "" .SUDO}}'
      SECTION: '{{default "" .SECTION}}'
    cmds:
      - |
        {{.SUDO}} initool --pass-through get "{{.FILE}}" '{{.SECTION}}' '{{.KEY}}' -v

  iniset:
    desc: Set INI values in a file
    deps:
      - task: initool
    vars:
      SUDO: '{{default "" .SUDO}}'
      SECTION: '{{default "" .SECTION}}'
    cmds:
      - |
        GET_CMD="{{.SUDO}} initool --pass-through get {{.FILE}}"
        SET_CMD="{{.SUDO}} initool --pass-through set {{.FILE}}"
        sudo test -f "{{.FILE}}" || {{.SUDO}} touch "{{.FILE}}"
        [[ $($GET_CMD "{{.SECTION}}" "{{.KEY}}" -v) != '{{.VALUE}}' ]] || exit 0
        {{.SUDO}} {{.TASKFILE_DIR}}/../scripts/backup.sh {{.FILE}}
        ## Buffer the output first
        OUT=$($SET_CMD '{{.SECTION}}' '{{.KEY}}' '{{.VALUE}}')
        echo "$OUT" | {{.SUDO}} tee "{{.FILE}}" >/dev/null

  packages:
    vars:
      PACKAGE_FILES: '{{.PACKAGE_FILES | default "packages.yaml packages.$(hostname).yaml"}}'
    desc: Manipulate packages defined in {{.PACKAGE_FILES}}
    deps:
      - task: iamnotroot
    cmds:
      - type yq &> /dev/null || {{.PARU}} go-yq
      - |
        PACKAGES=$(yq --no-colors --no-doc '.*[] | select(.state!="absent").name' {{.PACKAGE_FILES}} || true)
        if [[ -n "$PACKAGES" ]]; then
          set -x
          {{.PARU}} $PACKAGES
          { set +x; } 2>/dev/null
        fi
        PACKAGES=$(yq --no-colors --no-doc '.*[] | select(.state=="absent").name' {{.PACKAGE_FILES}} || true)
        for PKG in $PACKAGES; do
          {{.PARU}} -Q $PKG &>/dev/null || continue
          set -x
          {{.PARU_REMOVE}} $PKG || { set +x; } 2>/dev/null
          { set +x; } 2>/dev/null
        done

  files_operation:
    desc: Copy or symlink files from the specified directory. Children are used as base directories.
    summary: |
      Conventions:
        - '~' is a special directory used to denote the home directory, files will be linked or copied relative to $HOME
        - All children directories and files are copied or symlinked to the system relative to /
    cmds:
      - |
        type fd &>/dev/null || {{.PARU}} fd
        type delta &>/dev/null || {{.PARU}} git-delta
      - |
        OP={{.OP}}
        DIR={{.DIR}}
        [[ -d "$DIR" ]] || return
        for D in $(fd --type dir --max-depth 1 --hidden --format '{/}' . "$DIR"); do
          for F in $(fd --type file --hidden . "$DIR/$D"); do
            DEST="/${F#$DIR/}"
            SUDO=sudo
            if [[ "$D" == "~" ]]; then
              DEST="$HOME/${F#$DIR/$D/}"
              SUDO=
            fi
            [[ -d $(dirname $DEST) ]] || \
              mkdir -pv $(dirname $DEST)
            SRC=$(readlink -f $F)
            case $OP in
              cp)
                $SUDO cp --verbose --no-dereference "$SRC" "$DEST" || \
                  { RET=$?; delta "$SRC" "$DEST"; exit $RET; }
                ;;
              ln)
                $SUDO test -L "$DEST" || \
                  $SUDO ln --verbose --symbolic "$SRC" "$DEST" || \
                    { RET=$?; delta "$SRC" "$DEST"; exit $RET; }
                ## Fix symlink
                $SUDO readlink -e "$DEST" >/dev/null || \
                  $SUDO ln --verbose --symbolic --force "$SRC" "$DEST"
                ;;
              *)
                echo "[ERROR] invalid operation: $OP. Valid: cp, ln" 1>&2
                ;;
            esac
            $SUDO test -L "$DEST" || \
              $SUDO ln -vs "$SRC" "$DEST" || delta "$SRC" "$DEST"
          done
        done

  symlink:
    desc: Symlink files from the specified directory. Children are used as base.
    deps:
      - task: files_operation
        vars:
          OP: ln
          DIR: '{{.DIR}}'

  copy:
    desc: Copy files from the specified directory. Children are used as base.
    deps:
      - task: files_operation
        vars:
          OP: cp
          DIR: '{{.DIR}}'
